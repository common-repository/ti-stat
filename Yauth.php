<?php/*  Copyright 2011 Tesliuk Igor  (email : tigor@tigor.org.ua)    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License, version 2, as     published by the Free Software Foundation.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA*/class Yauth{public $token;public $counter_id;public $error;private $create_time;private $life_time;private $app_id;public function Yauth($app_id)	{	$this->app_id = $app_id;	$this->token = '';	$this->counter_id = '';	$this->create_time = 0;	$this->life_time = -1;	}	public function get_token($name,$pass)	{	$post = 'grant_type=password&client_id='.$this->app_id.'&username='.$name.'&password='.$pass;	$url = 'https://oauth.yandex.ru/token';	$header = array('Host: oauth.yandex.ru','Content-type: application/x-www-form-urlencoded','Content-Length: '.strlen($post));	$defaults = array(        CURLOPT_POST => 1,		CURLOPT_HEADER => 0,		CURLOPT_REFERER => 'http://tigor.org.ua',        CURLOPT_URL => $url,		CURLOPT_CONNECTTIMEOUT => 1,        CURLOPT_FRESH_CONNECT => 1,        CURLOPT_RETURNTRANSFER => 1,        CURLOPT_FORBID_REUSE => 1,        CURLOPT_TIMEOUT => 4,		CURLOPT_SSL_VERIFYPEER => false,        CURLOPT_POSTFIELDS => $post,		CURLOPT_HTTPHEADER => $header		);		    $ch = curl_init();    curl_setopt_array($ch, $defaults);	    if( ! $json = curl_exec($ch))    {      $this->error = 'curl'.curl_errno($ch);	  return false;    }	$http_code = (string)curl_getinfo($ch, CURLINFO_HTTP_CODE);	if (($http_code != '200')AND($http_code != '400'))		{		$this->error = 'http'.$http_code;		return false;		}    curl_close($ch);				$result = array(		access_token => '',		expires_in => '',		error => ''		);		$result = json_decode($json, true);		if ($result['error'] == '')		{				$this->token = $result['access_token'];		if ($result['expires_in'] != '')			{			$this->life_time = (int)$result['expires_in'];			} else {			$this->life_time = 'inf';			}		$this->create_time = (int)time();		return true;		}	else		{		$this->error = $result['error'];		return false;		}		}		public function check_token()	{	$return = true;		/*if ($this->life_time > 0)		{		echo 'not inf';		echo $this->life_time;		if (time()>($this->life_time+$this->create_time))			{			$this->error = 'token_outdated';			$return = false;			}		} 	*/	$counters = $this->yget('http://api-metrika.yandex.ru/counters?oauth_token='.$this->token);		if ($this->error != '')		{				$return = false;		}		if ($this->token == '')		{		$return = false;		} elseif ($this->counter_id != '') {						if (!$counters)			{			$return = false;			} else {			$return = false;			$xml = new SimpleXMLElement($counters);			$counters = $xml->counters;			$count = (int)$counters->attributes()->count;			for ($i=0;$i<$count;$i++)				{				if ($this->counter_id == $counters->counter[$i]->id)					{					$return = true;										}				}			}			}	return $return;	}	public function name_error() 	{	switch ($this->error){		case 'invalid_grant':			return 'Invalid username/password';			break;		case 'token_outdated':			return 'This token is expired, get new';			break;		case 'invalid_request':			return 'Something is wrong with plugin. Report to developer.';			break;		case 'http404':			return 'Error in request url';			break;		case 'invalid_client_credentials':			return 'Wrong client(application) ID';			break;		case 'unsupported_grant_type':			return 'Wrong grant_type';			break;		default:			return 'Unknown ERROR'.$this->error;					}		}	public function clear()	{	$this->token = '';	$this->error = '';	$this->counter_id = '';	$this->create_time = 0;	$this->life_time = -1;	}	public function yget($url) {		$ch = curl_init();	curl_setopt($ch, CURLOPT_URL, $url);	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);	curl_setopt($ch, CURLOPT_HTTPHEADER, array($url, 'GET'));	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT,  1);	$return = curl_exec($ch);	if(curl_errno($ch))    {		$this->error = 'curl'.curl_errno($ch);		return false;	      }    $http_code = (int) curl_getinfo($ch, CURLINFO_HTTP_CODE);	    if ($http_code != 200)	{		$this->error = 'http'.$http_code;		return false;	} else {		return $return;	}}	}?>